# -*- coding: utf-8 -*-
"""Web Scraping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PKICuHcv623vaS6LxoIXZOKOaIVy7cXZ

# Web Scraping IMDb Top 250 Movies
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from bs4 import BeautifulSoup
import requests
import time
import re
import pandas as pd
from tqdm.notebook import tqdm

base_url = 'https://www.imdb.com/'
url = 'https://www.imdb.com/chart/top/'

options = Options()
options.add_argument("--headless")
driver = webdriver.Firefox(options=options)
driver.get(url)

last_height = driver.execute_script("return document.body.scrollHeight")
while True:
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(0.5)
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height

soup = BeautifulSoup(driver.page_source, 'lxml')

top_movie = soup.find_all('li', class_ = 'ipc-metadata-list-summary-item sc-10233bc-0 iherUv cli-parent')

movie_links = []
for item in top_movie:
    link = base_url + item.find('a').get('href')
    movie_links.append(link)

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0'
}

movies_list = []
rank = 0
for link in tqdm((movie_links), desc = 'In progress of retrieving data:'):
    r = requests.get(link, headers = headers)
    soup = BeautifulSoup(r.content, 'lxml')

    rank += 1
    title = soup.find('title').text[:-14]
    items = [i.text for i in soup.find('ul', class_ = 'ipc-inline-list ipc-inline-list--show-dividers sc-d8941411-2 cdJsTz baseAlt')]; year = items[0] if len(items) > 0 else None; duration = items[-1] if len(items) > 1 else None; rating = items[1] if len(items) > 2 else None
    imdb_rating = soup.find('span', class_ = 'sc-eb51e184-1 cxhhrI').text
    vote_count = soup.find('div', class_ = 'sc-eb51e184-3 gUihYJ').text
    poster = base_url + soup.find('a', class_ = 'ipc-lockup-overlay ipc-focusable').get('href')
    genres_list = soup.find_all('span', class_ = 'ipc-chip__text')[:-1]
    genres = ', '.join([genre.text for genre in genres_list])
    plot = soup.find('span', class_ = 'sc-2d37a7c7-0 caYjFF').text
    directors_list = soup.find('span', class_ = 'ipc-metadata-list-item__label ipc-metadata-list-item__label--btn', string = re.compile('Director')).find_next('div').find_all('a')
    directors = ', '.join([director.text for director in directors_list])
    stars_list = soup.find('a', class_ = 'ipc-metadata-list-item__label ipc-metadata-list-item__label--link', string = 'Stars').find_next('div').find_all('a')
    stars = ', '.join([star.text for star in stars_list])

    movies_list.append({
        'IMDb Ranking': rank,
        'Title': title,
        'Year Release': year,
        'Age Rating': rating,
        'Duration': duration,
        'IMDb Rating': imdb_rating,
        'Vote Count': vote_count,
        'Genre': genres,
        'Plot': plot,
        'Directors': directors,
        'Stars': stars,
        'Poster': poster,
        'URL': link
    })

"""## Results"""

df = pd.DataFrame(movies_list)
df.to_csv('IMDb Top 250 Movies.csv', index = False)

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

df['IMDb Rating']= df['IMDb Rating'].astype(float)
plt.figure(figsize=(10, 6))

plt.hist(df['IMDb Rating'], bins=5, color='pink', edgecolor='red')
plt.title('IMDb Rating Distribution')
plt.xlabel('IMDb Rating')
plt.ylabel('Movies Count')
plt.grid(True)
plt.show()

df['Year Release'] = df['Year Release'].astype(int)
plt.figure(figsize=(12, 8))
plt.scatter(df['Year Release'], df['IMDb Rating'], color='blue', edgecolors='red', alpha=0.7)

top_5_movies = df.nlargest(5, 'IMDb Rating')
for i, row in top_5_movies.iterrows():
    plt.annotate(row['Title'],
                 (row['Year Release'], row['IMDb Rating']),
                 textcoords="offset points",
                 xytext=(15,7),
                 ha='left',
                 fontsize=10,
                 bbox=dict(boxstyle="round,pad=0.3", edgecolor="red", facecolor="pink", alpha=0.7),
                 arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=0.2", color='black'))


plt.title('IMDb Rating vs Release Year')
plt.xlabel('Release Year')
plt.ylabel('IMDb Rating')
plt.grid(True)
plt.show()

"""### Top 10 Genres

"""

genres = df['Genre'].str.split(', ').explode()
genre_counts = genres.value_counts().head(10).sort_values()

plt.figure(figsize=(10, 6))
genre_counts.plot(kind='barh', color='pink', edgecolor='red')
plt.title('Top 10 Genres')
plt.ylabel('')
plt.grid(True)
plt.show()

"""### Top 10 Directors

"""

directors = df['Directors'].str.split(', ').explode()
director_counts = directors.value_counts().head(10).sort_values()

plt.figure(figsize=(10, 6))
director_counts.plot(kind='barh', color='pink', edgecolor='red')
plt.title('Top 10 Directors')
plt.ylabel('')
plt.grid(True)
plt.show()

"""### Top 10 Actors

"""

stars = df['Stars'].str.split(', ').explode()
star_counts = stars.value_counts().head(10).sort_values()

plt.figure(figsize=(10, 6))
star_counts.plot(kind='barh', color='pink', edgecolor='red')
plt.title('Top 10 Actors')
plt.ylabel('')
plt.grid(True)
plt.show()